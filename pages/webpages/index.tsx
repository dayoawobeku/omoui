import type {GetStaticProps, NextPage} from 'next';
import Head from 'next/head';
import {dehydrate, QueryClient, useQuery} from '@tanstack/react-query';
import PagesCard from '../../components/PagesCard';
import {getWebpages} from '../../queryfns/getWebpages';
import {HeadingOne} from '../../components';
import {useEffect, useState} from 'react';

interface Pages {
  page_name: string;
  attributes: {
    pages: string[];
  };
}

const Webpages: NextPage = () => {
  const {data} = useQuery(['webpages'], getWebpages);
  const [uniquePages, setUniquePages] = useState([]);

  useEffect(() => {
    const pagesArray = data?.data?.map((page: Pages) => page.attributes.pages);
    const randomPages = pagesArray?.flat().sort(() => Math.random() - 0.5);
    const uniquePages = randomPages?.filter((page: Pages, index: number) => {
      return (
        randomPages?.findIndex((p: Pages) => p.page_name === page.page_name) ===
        index
      );
    });
    setUniquePages(uniquePages);
  }, [data?.data]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HeadingOne text="Webpages" />

      <section>
        <PagesCard pages={uniquePages} />
      </section>
    </>
  );
};

export default Webpages;

export const getStaticProps: GetStaticProps = async () => {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(['webpages'], getWebpages);
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
